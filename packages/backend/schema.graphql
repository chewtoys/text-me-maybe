directive @auth on FIELD_DEFINITION

enum Sender {
    SELF
    OTHER
}

type TOTPOnboarding {
    secret: String!
}

type User {
    id: Int!
    name: String!
    email: String!
    hasTOTP: Boolean!
    onboardTOTP: TOTPOnboarding
}

type Result {
    ok: Boolean!
}

type SignInResult {
    ok: Boolean!
    requiresTOTP: Boolean!
}

type Message {
    id: Int!
    body: String!
    sender: Sender!
    createdAt: String!
    updatedAt: String
    seen: Boolean!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type MessageEdge {
    cursor: String!
    node: Message!
}

type MessagesConnection {
    pageInfo: PageInfo!
    edges: [MessageEdge!]!
}

type Thread {
    id: Int!
    name: String!
    number: String!
    recipient: String!
    lastMessage: Message
    createdAt: String!
    updatedAt: String
    ended: Boolean!
    messages(first: Int!, after: String): MessagesConnection!
}

type ResetPassword {
    complete: Boolean!
}

type Query {
    threads: [Thread!]! @auth
    thread(id: Int!): Thread! @auth
    me: User! @auth
}

type Mutation {
    createThread(name: String!, to: String!, message: String!): Thread! @auth
    sendMessage(threadID: Int!, body: String!): Message! @auth
    signUp(name: String!, email: String!, password: String!): Result!
    signIn(email: String!, password: String!): SignInResult!
    exchangeTOTP(token: String!): Result!
    markMessageAsSeen(id: Int!): Message! @auth
    endThread(id: Int!): Thread! @auth
    deleteThread(id: Int!): Result! @auth
    enableTotp(secret: String!, token: String!): Result! @auth
    disableTotp(password: String!): Result! @auth
    updateAccount(name: String, email: String): User! @auth

    # Password Resets:
    forgotPassword(email: String!): Result!
    resetPassword(uuid: String!, password: String): ResetPassword!
}

type Subscription {
    newMessage(threadID: Int!): MessageEdge!
}
